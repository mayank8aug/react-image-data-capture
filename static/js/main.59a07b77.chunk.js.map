{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["imageContainer","position","display","imageCanvas","captureBtn","border","borderRadius","width","height","background","top","left","transform","cursor","props","userMediaConfig","useState","playerRef","createRef","canvasRef","tracks","useRef","useEffect","navigator","stream","timeout","setTimeout","setStreaming","error","console","onError","clearTimeout","captureImage","useCallback","imageWidth","imageHeight","context","webPData","blob","onCapture","webP","file","File","Date","style","ref","autoPlay","streaming","onClick","App","imageData","log","video","ReactDOM","render","document","getElementById"],"mappings":"wMAIMA,EAAiB,CACnBC,SADmB,WAEnBC,QAAS,gBAEPC,EAAc,CAChBD,QAAS,QAEPE,EAAa,CACfC,OADe,kBAEfC,aAFe,MAGfC,MAHe,OAIfC,OAJe,OAKfC,WALe,YAMfR,SANe,WAOfS,IAPe,MAQfC,KARe,MASfC,UATe,wBAUfC,OAAQ,W,MAGZ,SAAsBC,GAAO,IACnB,EAAN,EAAM,YAAN,EAAM,UAAN,EAAM,MAA6BC,EAAnC,EAAmCA,gBADV,EAESC,oBAAlC,GAFyB,mBAEnB,EAFmB,KAEnB,EAFmB,KAGnBC,EAAYC,sBACZC,EAAYD,sBACZE,EAASC,mBACfC,qBAAU,WACN,MAWA,OAVAC,6CAEWC,YACHP,sBACAG,UAAiBI,EAAjBJ,YACAK,EAAUC,YAAW,kBAAMC,GAAP,KAApBF,QALRF,OAMaK,YACLC,qDACA,GAAaC,QAEd,WACH,GAAaC,mBAElB,CAACd,EAAWa,EAffR,IAiBA,IAAMU,EAAeC,uBAAY,WAC7B,IAAMC,EAAajB,UAAnB,YACMkB,EAAclB,UAApB,aAFmC,EAGmB,CAACiB,EAAvD,GAIA,GAJCf,UAAD,MAHmC,KAGTA,UAA1B,OAHmC,KAInBA,qBAAhB,MACAiB,UAAkBnB,EAAlBmB,iBAEA,EAAe,CACX,IAAMC,EAAWlB,oBAAjB,cACAA,kBAA0BmB,YACtBC,EAAU,CAAED,OAAME,KAAR,EAAwBC,KAAM,IAAIC,KAAK,CAAT,cAAwB,IAAIC,MAA5B,sBAI5CvB,EAAJ,SACIA,sBAEL,CAACmB,EAAWpB,EAjBf,IAmBA,OACI,yBAAKyB,MAAO5C,GACR,2BAAO6C,IAAP,EAAuBC,UAAvB,EAAgCvC,MAAOA,IACtCwC,GACG,kCACI,yBAAKH,MAAL,EAAwBI,QAAShB,IACjC,4BAAQY,MAAR,EAA4BC,IAAK1B,OC9DtC8B,EANH,WAGV,OAAO,kBAAC,EAAD,CAAcV,UAFH,SAAAW,GAAerB,QAAQsB,IAAID,IAEFpB,QAD3B,SAAAF,GAAWC,QAAQsB,IAAIvB,IACsBrB,MAAO,IAAKQ,gBAAiB,CAAEqC,OAAO,MCDrGC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.59a07b77.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport { createRef, useCallback } from 'react';\n\nconst imageContainer = {\n    position: 'relative',\n    display: 'inline-block'\n};\nconst imageCanvas = {\n    display: 'none'\n};\nconst captureBtn = {\n    border: '1px solid white',\n    borderRadius: '50%',\n    width: '50px',\n    height: '50px',\n    background: '#f7473587',\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    cursor: 'pointer'\n  }\n\nfunction ImageCapture(props) {\n    const { onCapture, onError, width, userMediaConfig } = props;\n    const [streaming, setStreaming] = useState(false);\n    const playerRef = createRef();\n    const canvasRef = createRef();\n    const tracks = useRef();\n    useEffect(() => {\n        let timeout;\n        navigator.mediaDevices\n            .getUserMedia(userMediaConfig)\n            .then((stream) => {\n                playerRef.current.srcObject = stream;\n                tracks.current = stream.getTracks();\n                timeout = setTimeout(() => setStreaming(true), 2000);\n            }).catch(error => {\n                console.error('Error: Unable to access camera ::', error);\n                if (onError) onError(error);\n            });\n        return () => {\n            if (timeout) clearTimeout(timeout);\n        };\n    }, [playerRef, onError, userMediaConfig]);\n\n    const captureImage = useCallback(() => {\n        const imageWidth = playerRef.current.offsetWidth;\n        const imageHeight = playerRef.current.offsetHeight;\n        [canvasRef.current.width, canvasRef.current.height] = [imageWidth, imageHeight];\n        const context = canvasRef.current.getContext('2d');\n        context.drawImage(playerRef.current, 0, 0, imageWidth, imageHeight);\n        // Trigger the callback function\n        if (onCapture) {\n            const webPData = canvasRef.current.toDataURL('image/webp');\n            canvasRef.current.toBlob((blob) => {\n                onCapture({ blob, webP: webPData, file: new File([webPData], `${new Date().getTime}.png`)});\n            });\n        }\n        // Stop the camera stream\n        if (tracks.current) {\n            tracks.current[0].stop();\n        }  \n    }, [onCapture, canvasRef, playerRef]);\n\n    return (\n        <div style={imageContainer}>\n            <video ref={playerRef} autoPlay width={width}></video>\n            {streaming &&\n                <Fragment>\n                    <div style={captureBtn} onClick={captureImage} />\n                    <canvas style={imageCanvas} ref={canvasRef} />\n                </Fragment>\n            }\n        </div>\n    );\n}\n\nexport default ImageCapture;\n","import React from 'react'\n\nimport ImageCapture from 'react-image-data-capture';\n\nconst App = () => {\n  const onCapture = imageData => { console.log(imageData) };\n  const onError = error => { console.log(error) };\n  return <ImageCapture onCapture={onCapture} onError={onError} width={300} userMediaConfig={{ video: true }} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}