{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["props","onCapture","onError","width","userMediaConfig","useState","streaming","setStreaming","playerRef","createRef","canvasRef","tracks","useRef","useEffect","navigator","stream","timeout","setTimeout","error","console","clearTimeout","captureImage","useCallback","imageWidth","imageHeight","context","webPData","blob","webP","file","File","Date","className","ref","autoPlay","onClick","App","imageData","video","ReactDOM","render","document","getElementById"],"mappings":"iRAKA,SAAsBA,GAAO,IACjBC,EAA+CD,EAD9B,UACNE,EAAoCF,EAD9B,QACGG,EAA2BH,EAD9B,MACUI,EAAoBJ,EAD9B,kBAESK,oBAFT,GAElBC,EAFkB,KAEPC,EAFO,KAGnBC,EAAYC,sBACZC,EAAYD,sBACZE,EAASC,mBACfC,qBAAU,WACN,MAWA,OAVAC,6CAEU,YACFN,sBACAG,UAAiBI,EAAjBJ,YACAK,EAAUC,YAAW,kBAAMV,GAAN,KAArBS,QALRF,OAMa,SAAAI,GACLC,qDACA,GAAajB,QAEd,WACH,GAAakB,mBAElB,CAACZ,EAAWN,EAffW,IAiBA,IAAMQ,EAAeC,uBAAY,WAC7B,IAAMC,EAAaf,UAAnB,YACMgB,EAAchB,UAApB,aAFmC,EAGmB,CAACe,EAHpB,GAOnC,GAJCb,UAHkC,WAGTA,UAHS,YAInBA,qBAAhB,MACAe,UAAkBjB,EAAlBiB,iBAEA,EAAe,CACX,IAAMC,EAAWhB,oBAAjB,cACAA,kBAAyB,YACrBT,EAAU,CAAE0B,KAAF,EAAQC,KAAR,EAAwBC,KAAM,IAAIC,KAAK,CAAT,IAAwB,IAAIC,MAA5B,qBAI5CpB,EAAJ,SACIA,sBAEL,CAACV,EAAWS,EAjBf,IAmBA,OACI,yBAAKsB,UAAU,mBACX,2BAAOC,IAAP,EAAuBC,UAAvB,EAAgC/B,MAAOA,IACtCG,GACG,kCACI,yBAAK0B,UAAL,cAA6BG,QAASd,IACtC,4BAAQW,UAAR,eAAiCC,IAAKvB,OC1C3C0B,G,MANH,WAGV,OAAO,kBAAC,EAAD,CAAcnC,UAFH,SAAAoC,KAEyBnC,QAD3B,SAAAgB,KAC6Cf,MAAO,IAAKC,gBAAiB,CAAEkC,OAAO,OCFrGC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2347618f.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport { createRef, useCallback } from 'react';\nimport './index.css';\n\nfunction ImageCapture(props) {\n    const { onCapture, onError, width, userMediaConfig } = props;\n    const [streaming, setStreaming] = useState(false);\n    const playerRef = createRef();\n    const canvasRef = createRef();\n    const tracks = useRef();\n    useEffect(() => {\n        let timeout;\n        navigator.mediaDevices\n            .getUserMedia(userMediaConfig)\n            .then((stream) => {\n                playerRef.current.srcObject = stream;\n                tracks.current = stream.getTracks();\n                timeout = setTimeout(() => setStreaming(true), 2000);\n            }).catch(error => {\n                console.error('Error: Unable to access camera ::', error);\n                if (onError) onError(error);\n            });\n        return () => {\n            if (timeout) clearTimeout(timeout);\n        };\n    }, [playerRef, onError, userMediaConfig]);\n\n    const captureImage = useCallback(() => {\n        const imageWidth = playerRef.current.offsetWidth;\n        const imageHeight = playerRef.current.offsetHeight;\n        [canvasRef.current.width, canvasRef.current.height] = [imageWidth, imageHeight];\n        const context = canvasRef.current.getContext('2d');\n        context.drawImage(playerRef.current, 0, 0, imageWidth, imageHeight);\n        // Trigger the callback function\n        if (onCapture) {\n            const webPData = canvasRef.current.toDataURL('image/webp');\n            canvasRef.current.toBlob((blob) => {\n                onCapture({ blob, webP: webPData, file: new File([webPData], `${new Date().getTime}.png`)});\n            });\n        }\n        // Stop the camera stream\n        if (tracks.current) {\n            tracks.current[0].stop();\n        }  \n    }, [onCapture, canvasRef, playerRef]);\n\n    return (\n        <div className=\"image-container\">\n            <video ref={playerRef} autoPlay width={width}></video>\n            {streaming &&\n                <Fragment>\n                    <div className=\"capture-btn\" onClick={captureImage} />\n                    <canvas className=\"image-canvas\" ref={canvasRef} />\n                </Fragment>\n            }\n        </div>\n    );\n}\n\nexport default ImageCapture;\n","import React from 'react'\n\nimport ImageCapture from 'react-image-capture'\nimport 'react-image-capture/dist/index.css'\n\nconst App = () => {\n  const onCapture = imageData => { debugger };\n  const onError = error => { debugger };\n  return <ImageCapture onCapture={onCapture} onError={onError} width={300} userMediaConfig={{ video: true }} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}