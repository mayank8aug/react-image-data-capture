{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["props","userMediaConfig","useState","playerRef","createRef","canvasRef","tracks","useRef","useEffect","navigator","stream","timeout","setTimeout","setStreaming","error","console","onError","clearTimeout","captureImage","useCallback","imageWidth","imageHeight","context","webPData","blob","onCapture","webP","file","File","Date","className","ref","autoPlay","width","streaming","onClick","App","imageData","video","ReactDOM","render","document","getElementById"],"mappings":"yRAKA,SAAsBA,GAAO,IACnB,EAAN,EAAM,YAAN,EAAM,UAAN,EAAM,MAA6BC,EAAnC,EAAmCA,gBADV,EAESC,oBAAlC,GAFyB,mBAEnB,EAFmB,KAEnB,EAFmB,KAGnBC,EAAYC,sBACZC,EAAYD,sBACZE,EAASC,mBACfC,qBAAU,WACN,MAWA,OAVAC,6CAEWC,YACHP,sBACAG,UAAiBI,EAAjBJ,YACAK,EAAUC,YAAW,kBAAMC,GAAP,KAApBF,QALRF,OAMaK,YACLC,qDACA,GAAaC,QAEd,WACH,GAAaC,mBAElB,CAACd,EAAWa,EAffR,IAiBA,IAAMU,EAAeC,uBAAY,WAC7B,IAAMC,EAAajB,UAAnB,YACMkB,EAAclB,UAApB,aAFmC,EAGmB,CAACiB,EAAvD,GAIA,GAJCf,UAAD,MAHmC,KAGTA,UAA1B,OAHmC,KAInBA,qBAAhB,MACAiB,UAAkBnB,EAAlBmB,iBAEA,EAAe,CACX,IAAMC,EAAWlB,oBAAjB,cACAA,kBAA0BmB,YACtBC,EAAU,CAAED,OAAME,KAAR,EAAwBC,KAAM,IAAIC,KAAK,CAAT,cAAwB,IAAIC,MAA5B,sBAI5CvB,EAAJ,SACIA,sBAEL,CAACmB,EAAWpB,EAjBf,IAmBA,OACI,yBAAKyB,UAAU,mBACX,2BAAOC,IAAP,EAAuBC,UAAvB,EAAgCC,MAAOA,IACtCC,GACG,kCACI,yBAAKJ,UAAL,cAA6BK,QAASjB,IACtC,4BAAQY,UAAR,eAAiCC,IAAK1B,OC1C3C+B,G,MANH,WAGV,OAAO,kBAAC,EAAD,CAAcX,UAFH,SAAAY,KAEyBrB,QAD3B,SAAAF,KAC6CmB,MAAO,IAAKhC,gBAAiB,CAAEqC,OAAO,OCFrGC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.434159c1.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { useState, useEffect, useRef } from 'react';\nimport { createRef, useCallback } from 'react';\nimport './index.css';\n\nfunction ImageCapture(props) {\n    const { onCapture, onError, width, userMediaConfig } = props;\n    const [streaming, setStreaming] = useState(false);\n    const playerRef = createRef();\n    const canvasRef = createRef();\n    const tracks = useRef();\n    useEffect(() => {\n        let timeout;\n        navigator.mediaDevices\n            .getUserMedia(userMediaConfig)\n            .then((stream) => {\n                playerRef.current.srcObject = stream;\n                tracks.current = stream.getTracks();\n                timeout = setTimeout(() => setStreaming(true), 2000);\n            }).catch(error => {\n                console.error('Error: Unable to access camera ::', error);\n                if (onError) onError(error);\n            });\n        return () => {\n            if (timeout) clearTimeout(timeout);\n        };\n    }, [playerRef, onError, userMediaConfig]);\n\n    const captureImage = useCallback(() => {\n        const imageWidth = playerRef.current.offsetWidth;\n        const imageHeight = playerRef.current.offsetHeight;\n        [canvasRef.current.width, canvasRef.current.height] = [imageWidth, imageHeight];\n        const context = canvasRef.current.getContext('2d');\n        context.drawImage(playerRef.current, 0, 0, imageWidth, imageHeight);\n        // Trigger the callback function\n        if (onCapture) {\n            const webPData = canvasRef.current.toDataURL('image/webp');\n            canvasRef.current.toBlob((blob) => {\n                onCapture({ blob, webP: webPData, file: new File([webPData], `${new Date().getTime}.png`)});\n            });\n        }\n        // Stop the camera stream\n        if (tracks.current) {\n            tracks.current[0].stop();\n        }  \n    }, [onCapture, canvasRef, playerRef]);\n\n    return (\n        <div className=\"image-container\">\n            <video ref={playerRef} autoPlay width={width}></video>\n            {streaming &&\n                <Fragment>\n                    <div className=\"capture-btn\" onClick={captureImage} />\n                    <canvas className=\"image-canvas\" ref={canvasRef} />\n                </Fragment>\n            }\n        </div>\n    );\n}\n\nexport default ImageCapture;\n","import React from 'react'\n\nimport ImageCapture from 'react-image-capture'\nimport 'react-image-capture/dist/index.css'\n\nconst App = () => {\n  const onCapture = imageData => { debugger };\n  const onError = error => { debugger };\n  return <ImageCapture onCapture={onCapture} onError={onError} width={300} userMediaConfig={{ video: true }} />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}